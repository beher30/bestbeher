"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url

# Load environment variables from .env file
load_dotenv()

# Patch Django's PostgreSQL backend for CockroachDB compatibility
# CockroachDB is compatible with Django 5.x but has some limitations
try:
    from django.db.backends.postgresql.base import DatabaseWrapper
    from django.db.backends.postgresql.schema import DatabaseSchemaEditor
    
    # Patch 1: Allow CockroachDB version (reports as PostgreSQL 13.0)
    _original_check_database_version_supported = DatabaseWrapper.check_database_version_supported
    
    def patched_check_database_version_supported(self):
        """Override version check for CockroachDB compatibility"""
        # Get database host from settings
        db_host = os.getenv('DATABASE_HOST', '')
        # If connecting to CockroachDB, skip the version check
        if 'cockroachlabs.cloud' in db_host or 'cockroachlabs.cloud' in str(self.settings_dict.get('HOST', '')):
            return  # Skip version check for CockroachDB
        # Otherwise, use original check
        return _original_check_database_version_supported(self)
    
    # Apply the patch
    DatabaseWrapper.check_database_version_supported = patched_check_database_version_supported
    
    # Patch 2: Disable deferred foreign keys for CockroachDB
    # CockroachDB doesn't support DEFERRABLE INITIALLY DEFERRED
    _original_add_field = DatabaseSchemaEditor.add_field
    
    def patched_add_field(self, model, field):
        """Disable deferred foreign keys for CockroachDB"""
        # Check if connecting to CockroachDB
        db_host = os.getenv('DATABASE_HOST', '')
        is_cockroachdb = 'cockroachlabs.cloud' in db_host or 'cockroachlabs.cloud' in str(self.connection.settings_dict.get('HOST', ''))
        
        # Temporarily disable deferred constraints for CockroachDB
        if is_cockroachdb:
            original_defer = getattr(self, '_defer_constraints', False)
            self._defer_constraints = False
            try:
                return _original_add_field(self, model, field)
            finally:
                self._defer_constraints = original_defer
        else:
            return _original_add_field(self, model, field)
    
    # Store original methods for constraint creation and SQL execution
    _original__create_fk_sql = DatabaseSchemaEditor._create_fk_sql
    _original_execute = DatabaseSchemaEditor.execute
    
    def patched__create_fk_sql(self, model, field, suffix):
        """Remove DEFERRABLE INITIALLY DEFERRED from foreign key constraints for CockroachDB"""
        sql = _original__create_fk_sql(self, model, field, suffix)
        
        # Check if connecting to CockroachDB
        db_host = os.getenv('DATABASE_HOST', '')
        is_cockroachdb = 'cockroachlabs.cloud' in db_host or 'cockroachlabs.cloud' in str(self.connection.settings_dict.get('HOST', ''))
        
        # Remove DEFERRABLE INITIALLY DEFERRED for CockroachDB
        if is_cockroachdb:
            if isinstance(sql, str):
                sql = sql.replace('DEFERRABLE INITIALLY DEFERRED', '')
                sql = sql.replace('DEFERRABLE', '')
                sql = sql.replace(' INITIALLY DEFERRED', '')
                # Clean up any double spaces
                sql = ' '.join(sql.split())
        
        return sql
    
    def patched_execute(self, sql, params=None):
        """Intercept SQL execution to remove DEFERRABLE for CockroachDB"""
        # Check if connecting to CockroachDB
        db_host = os.getenv('DATABASE_HOST', '')
        is_cockroachdb = 'cockroachlabs.cloud' in db_host or 'cockroachlabs.cloud' in str(self.connection.settings_dict.get('HOST', ''))
        
        if is_cockroachdb and sql:
            # Remove DEFERRABLE from any SQL statement
            if isinstance(sql, str):
                sql = sql.replace(' DEFERRABLE INITIALLY DEFERRED', '')
                sql = sql.replace('DEFERRABLE INITIALLY DEFERRED', '')
                sql = sql.replace(' DEFERRABLE', '')
                sql = sql.replace('INITIALLY DEFERRED', '')
                # Clean up double spaces
                sql = ' '.join(sql.split())
            elif isinstance(sql, (list, tuple)):
                # Handle list/tuple of SQL statements
                cleaned_sql = []
                for stmt in sql:
                    if isinstance(stmt, str):
                        stmt = stmt.replace(' DEFERRABLE INITIALLY DEFERRED', '')
                        stmt = stmt.replace('DEFERRABLE INITIALLY DEFERRED', '')
                        stmt = stmt.replace(' DEFERRABLE', '')
                        stmt = stmt.replace('INITIALLY DEFERRED', '')
                        stmt = ' '.join(stmt.split())
                    cleaned_sql.append(stmt)
                sql = type(sql)(cleaned_sql)
        
        return _original_execute(self, sql, params)
    
    DatabaseSchemaEditor.add_field = patched_add_field
    DatabaseSchemaEditor._create_fk_sql = patched__create_fk_sql
    DatabaseSchemaEditor.execute = patched_execute
    
except ImportError:
    pass  # If Django isn't available during import, skip

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-dev-key-only-for-local')

# Generate a secure secret key if not provided and in production
if not DEBUG and SECRET_KEY == 'django-insecure-dev-key-only-for-local':
    import secrets
    SECRET_KEY = secrets.token_urlsafe(50)

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,0.0.0.0').split(',')

# Force HTTP in development to prevent HTTPS errors
if DEBUG:
    # Override any HTTPS enforcement
    os.environ['HTTPS'] = 'off'
    # Ensure no secure redirects
    SECURE_PROXY_SSL_HEADER = None

# Security settings for production
if not DEBUG:
    # HTTPS settings
    SECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT', 'True').lower() == 'true'
    SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', '31536000'))  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Cookie security
    SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'True').lower() == 'true'
    CSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE', 'True').lower() == 'true'
    
    # CSRF trusted origins
    CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS', 'https://*.onrender.com').split(',')
else:
    # Development settings - Force HTTP only to eliminate HTTPS errors
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    # Disable other security features that might cause issues in development
    SECURE_BROWSER_XSS_FILTER = False
    SECURE_CONTENT_TYPE_NOSNIFF = False


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'myapp.apps.MyappConfig',  # Use the full application configuration
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Add WhiteNoise middleware for production
if not DEBUG:
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'myapp/templates')],  # Ensure this is correct
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Use PostgreSQL in production (via DATABASE_URL) or SQLite in development  
if DEBUG:
    # Development: Use SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    # Production: Use PostgreSQL/CockroachDB from environment variables
    # First try DATABASE_URL (provided by Render or manually configured)
    database_url = os.getenv('DATABASE_URL')
    if database_url:
        # Handle CockroachDB or PostgreSQL connection string
        # CockroachDB uses sslmode=verify-full, PostgreSQL may use different SSL modes
        db_config = dj_database_url.config(
            default=database_url,
            conn_max_age=600,
            conn_health_checks=True,
            ssl_require=True
        )
        
        # For CockroachDB, ensure SSL is properly configured
        # If sslmode is in the URL, it will be handled by dj_database_url
        # Otherwise, set sslmode for secure connections
        if 'OPTIONS' not in db_config:
            db_config['OPTIONS'] = {}
        
        # For CockroachDB, use 'require' instead of 'verify-full' to avoid certificate file requirement
        # 'require' still encrypts the connection but doesn't require the certificate file
        # This works on Render where certificate files aren't available
        if 'sslmode' not in db_config['OPTIONS']:
            db_config['OPTIONS']['sslmode'] = 'require'
        
        DATABASES = {
            'default': db_config
        }
    else:
        # Use individual database environment variables
        db_name = os.getenv('DATABASE_NAME')
        db_user = os.getenv('DATABASE_USER')
        db_password = os.getenv('DATABASE_PASSWORD')
        db_host = os.getenv('DATABASE_HOST')
        db_port = os.getenv('DATABASE_PORT', '5432')
        
        # Only set up database if we have required credentials
        if db_name and db_user and db_host:
            # Use 'require' for SSL (encrypts connection without requiring certificate file)
            # This works for both CockroachDB and PostgreSQL on Render
            ssl_mode = 'require'
            
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': db_name,
                    'USER': db_user,
                    'PASSWORD': db_password or '',
                    'HOST': db_host,
                    'PORT': db_port,
                    'OPTIONS': {
                        'sslmode': ssl_mode,
                    },
                }
            }
        else:
            # Fallback to SQLite if no database config available (for build process)
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': BASE_DIR / 'db.sqlite3',
                }
            }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'myapp/static'),
]

# Static files finders
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Static files storage - use WhiteNoise for production
if DEBUG:
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
else:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (Videos, Images, etc)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Authentication settings
LOGIN_REDIRECT_URL = 'index'
LOGIN_URL = 'login'
LOGOUT_REDIRECT_URL = 'index'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Video Streaming Settings
VIDEO_STREAMING = {
    'MAX_SESSION_DURATION': 3600,  # 1 hour in seconds
    'WATERMARK_ENABLED': True,
    'PREVENT_DOWNLOAD': True,
    'ANALYTICS_ENABLED': True,
    'ALLOWED_VIDEO_TYPES': ['video/mp4', 'video/webm', 'video/ogg'],
    'MAX_VIDEO_SIZE': 1024 * 1024 * 1024,  # 1GB
}

# Cache settings for video streaming
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'suppress_https_warnings': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not (
                'HTTPS' in record.getMessage() or 
                'SSL' in record.getMessage() or
                'Bad request' in record.getMessage()
            )
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'filters': ['suppress_https_warnings'] if DEBUG else [],
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'myapp': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['console'],
            'level': 'ERROR' if DEBUG else 'INFO',  # Suppress HTTP warnings in development
            'propagate': False,
        },
    },
}
